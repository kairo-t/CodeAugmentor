name: C# CI/CD

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:

    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2

    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: '6.0'

    - name: Restore dependencies
      run: dotnet restore

    - name: Build
      run: dotnet build --no-restore

    - name: Test
      run: dotnet test --verbosity normal

    - name: Publish
      run: dotnet publish --configuration Release --self-contained true --runtime win-x64 --output ./publish

    - name: Get latest version tag
      id: get_version
      shell: bash
      run: |
        # get latest tag name
        TAG_NAME=$(git describe --tags --abbrev=0 2>/dev/null || echo "v1.0.0")

        # strip the "v" prefix
        VERSION=${TAG_NAME#v}

        # split version into array
        VERSION_BITS=(${VERSION//./ })

        # get number parts
        VNUM1=${VERSION_BITS[0]}
        VNUM2=${VERSION_BITS[1]}
        VNUM3=${VERSION_BITS[2]}

        # increment version
        VNUM3=$((VNUM3+1))

        # create new tag
        NEW_TAG="v$VNUM1.$VNUM2.$VNUM3"
        echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV

    - name: Create Git Tag
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      run: git tag ${{ env.NEW_TAG }}
      
    - name: Push Git Tags
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GH_PAT }}
        tags: true

    - name: Archive published files
      run: |
        cd ./publish
        7z a ../${{ env.NEW_TAG }}.zip *
      shell: pwsh

    - name: Create Release
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        tag_name: ${{ env.NEW_TAG }}
        release_name: Release ${{ env.NEW_TAG }}
        draft: false
        prerelease: false

    - name: Upload Release Asset
      if: github.event_name == 'push' && github.ref == 'refs/heads/master'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GH_PAT }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./${{ env.NEW_TAG }}.zip
        asset_name: ${{ env.NEW_TAG }}.zip
        asset_content_type: application/zip